===================================================================================================================================
What you'll learn
===================================================================================================================================
ASPNET Core Web API Development of Microservices
REST API Principles, CRUD Operations
Mongo DB and Redis NoSQL Database Connection on Docker
Entity Framework Core with SQL Server Database Connection on Docker
N-Layer implementation with Repository Pattern
Swagger Open API implementation
Consume Discount Grpc Service for inter-service sync communication to calculate product final price
Publish BasketCheckout Queue with using MassTransit and RabbitMQ
Build a Highly Performant inter-service gRPC Communication with Basket Microservice
Using Dapper for micro-orm implementation to simplify data access and ensure high performance
PostgreSQL database connection and containerization
Async Microservices Communication with RabbitMQ Message-Broker Service
Using RabbitMQ Publish/Subscribe Topic Exchange Model
Using MassTransit for abstraction over RabbitMQ Message-Broker system
Implementing DDD, CQRS, and Clean Architecture with using Best Practices
Developing CQRS with using MediatR, FluentValidation and AutoMapper packages
Consuming RabbitMQ BasketCheckout event queue with using MassTransit-RabbitMQ Configuration
Using Entity Framework Core ORM and auto migrate to SqlServer when application startup
Ocelot API Gateway Development of Microservices
Call Ocelot APIs with HttpClientFactory
The Gateway aggregation pattern in Shopping Aggregator
ASPNET Core Web Application with Bootstrap 4 and Razor template
Docker Compose Containerization of All Microservices
Use Portainer for Container lightweight management UI which allows you to easily manage your different Docker environments
pgAdmin PostgreSQL Tools feature rich Open Source administration and development platform for PostgreSQL

====================================================================================================================================

This course comes from a live github aspnetrun microservices repository which verified from community with 1000+ stars and 600+ forks.

You will learn how to build Microservices on .Net platforms which used Asp.Net Web API, Docker, RabbitMQ, MassTransit, Grpc, Ocelot API Gateway, MongoDB, Redis, PostgreSQL, SqlServer, Dapper, Entity Framework Core, CQRS and Clean Architecture implementation with 24.5 hours fully upgraded videos.

You will develop e-commerce modules over Product, Basket and Ordering microservices with NoSQL (MongoDB, Redis) and Relational databases (PostgreSQL, Sql Server) with communicating over RabbitMQ Event Driven Communication and using Ocelot API Gateway. You can find Microservices Architecture and Step by Step Implementation on .NET which step by step developing this course with extensive explanations and details.

Along with this you’ll develop following microservices and items:

Catalog microservice which includes;

ASP.NET Core Web API application

REST API principles, CRUD operations

MongoDB database connection and containerization

Repository Pattern Implementation

Swagger Open API implementation

Basket microservice which includes;

ASP.NET Web API application

REST API principles, CRUD operations

Redis database connection and containerization

Consume Discount Grpc Service for inter-service sync communication to calculate product final price

Publish BasketCheckout Queue with using MassTransit and RabbitMQ

Discount microservice which includes;

ASP.NET Grpc Server application

Build a Highly Performant inter-service gRPC Communication with Basket Microservice

Exposing Grpc Services with creating Protobuf messages

Using Dapper for micro-orm implementation to simplify data access and ensure high performance

PostgreSQL database connection and containerization

Microservices Communication

Sync inter-service gRPC Communication

Async Microservices Communication with RabbitMQ Message-Broker Service

Using RabbitMQ Publish/Subscribe Topic Exchange Model

Using MassTransit for abstraction over RabbitMQ Message-Broker system

Publishing BasketCheckout event queue from Basket microservices and Subscribing this event from Ordering microservices

Create RabbitMQ EventBus.Messages library and add references Microservices

Ordering Microservice

Implementing DDD, CQRS, and Clean Architecture with using Best Practices

Developing CQRS with using MediatR, FluentValidation and AutoMapper packages

Consuming RabbitMQ BasketCheckout event queue with using MassTransit-RabbitMQ Configuration

SqlServer database connection and containerization

Using Entity Framework Core ORM and auto migrate to SqlServer when application startup

API Gateway Ocelot Microservice

Implement API Gateways with Ocelot

Sample microservices/containers to reroute through the API Gateways

Run multiple different API Gateway/BFF container types

The Gateway aggregation pattern in Shopping.Aggregator

WebUI ShoppingApp Microservice

ASP.NET Core Web Application with Bootstrap 4 and Razor template

Call Ocelot APIs with HttpClientFactory

ASPNET Core Razor Tools — View Components, partial Views, Tag Helpers, Model Bindings and Validations, Razor Sections etc.

Ancillary Containers

Use Portainer for Container lightweight management UI which allows you to easily manage your different Docker environments

pgAdmin PostgreSQL Tools feature rich Open Source administration and development platform for PostgreSQL

Docker Compose establishment with all microservices on docker;

Containerization of microservices

Containerization of databases

Override Environment variables

On top of all these, you'll learn how to write quality code, not just how to build microservices. In this course you will see the demonstrating a layered application architecture with DDD best practices. Implements NLayer Hexagonal architecture (Core, Application, Infrastructure and Presentation Layers) and Domain Driven Design (Entities, Repositories, Domain/Application Services, DTO's...) and aimed to be a Clean Architecture, with applying SOLID principles in order to use for a project template. Also implements best practices like loosely-coupled, dependency-inverted architecture and using design patterns such as Dependency Injection, logging, validation, exception handling and so on.